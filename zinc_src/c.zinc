main fn {}
foo fn() {}

bar fn(a sint) {}
bar2 fn(a sint, b uint,) {}

baz fn void {}
add fn(sint, sint) sint {}
add fn(sint, sint,) sint {}

literals fn {
    1;
    0x2;
    0b11;
    0o4;
    1.2;

    "this is string";

    path::to::somewhere;
}

return_naked fn { return; }
return_value fn sint { return 1; }

infix_ops fn {
    a = b;
    a + b;
    a - b;
    a * b;
    a / b;
}

add_long fn(a sint, b sint,) sint {
    let ret = a + b;
    return ret;
}
add_shorter fn(a sint, b sint) sint {
    return a + b;
}
add_shortist fn(a sint, b sint) sint => a + b;

let_bindings fn {
    let a string = "a";
    let b = "b";
    let c sint = 3;
}

const ONE = 1;
const NAME = "zinc";
const THREE uint = 3;

square fn(a sint) sint => a * a;

blocks fn {
    let outer = "outer";
    {
        let inner = "inner";
        {
            let inner2 = "inner2";
        }
    }
}
